import { VersionCardProps } from "@/components/VersionCard";

const rubyVersions: VersionCardProps[] = [
  {
    id: "ruby-1-0",
    version: "1.0",
    title: "Rubyの誕生：オブジェクト指向の哲学が息づく",
    summary: "「プログラマの楽しさを追求し、すべてがオブジェクトであるという革新的な思想を携えて誕生した、Rubyの原点。」",
    features: [
      { icon: "fas fa-gem", title: "オブジェクト指向の徹底", description: "数値や文字列を含む「すべて」がオブジェクトとして扱われ、一貫性のあるプログラミング体験を提供しました。" },
      { icon: "fas fa-box", title: "ブロックとイテレータ", description: "コードの再利用性と表現力を高める、Rubyの象徴的な機能であるブロックが導入されました。" },
      { icon: "fas fa-puzzle-piece", title: "Mixin (モジュール)", description: "多重継承の複雑さを避けつつ、複数の機能をクラスに組み込むメカニズムが提供されました。" },
      { icon: "fas fa-lock", title: "クロージャ", description: "外側のスコープの変数を参照できるクロージャがサポートされ、柔軟なプログラミングが可能になりました。" },
    ],
    position: "Perl、Smalltalk、Eiffel、Ada、Lispなど、様々な言語の良い部分を取り入れつつ、独自の哲学を確立した新しいスクリプト言語として登場しました。まだニッチな存在でしたが、その後の成長の礎を築きました。",
    performance: "初期バージョンであり、パフォーマンスよりも言語の設計とプログラマの生産性に重点が置かれていました。",
  },
  {
    id: "ruby-1-8",
    version: "1.8",
    title: "Railsと共に世界を席巻：Rubyの黄金時代を築いた安定版",
    summary: "「Ruby on Railsの登場により、Web開発のデファクトスタンダードとして広く認知され、Rubyの知名度を一気に高めたバージョン。」",
    features: [
      { icon: "fas fa-globe", title: "Railsとの共鳴", description: "Ruby on Railsがこのバージョンで広く使われるようになり、Rubyの普及に絶大な影響を与えました。" },
      { icon: "fas fa-cog", title: "安定性と成熟", description: "長い期間にわたって安定版として利用され、多くのアプリケーションがこのバージョンで開発されました。" },
      { icon: "fas fa-rocket", title: "パフォーマンス向上", description: "1.6系と比較して、着実なパフォーマンス改善が図られました。" },
    ],
    position: "Ruby on Railsの爆発的な人気により、RubyはWebアプリケーション開発の最前線に躍り出ました。プログラマの生産性を最大化する言語として、その地位を確立しました。",
    performance: "1.6系から着実に改善され、実用的なWebアプリケーション開発に十分な性能を提供しました。",
  },
  {
    id: "ruby-1-9",
    version: "1.9",
    title: "YARV導入で劇的な高速化：現代Rubyの基礎を築いた転換点",
    summary: "「新しい仮想マシンYARVの導入により、実行速度が飛躍的に向上し、現代のRubyの基盤を築いた画期的なバージョン。」",
    features: [
      { icon: "fas fa-bolt", title: "YARV (Yet Another Ruby VM) の導入", description: "従来のRubyインタプリタから、バイトコードベースの新しい仮想マシンに切り替わり、実行速度が大幅に向上しました。" },
      { icon: "fas fa-file-code", title: "新しいHash構文", description: "{ key: value } のような、より簡潔なハッシュリテラル構文が導入されました。" },
      { icon: "fas fa-sort-numeric-down", title: "デフォルトで順序付きハッシュ", description: "ハッシュが挿入順序を保持するようになり、より予測可能な挙動を提供しました。" },
      { icon: "fas fa-thread", title: "Fiberクラス", description: "コルーチンを実現するためのFiberクラスが導入され、軽量な並行処理の記述が可能になりました。" },
      { icon: "fas fa-language", title: "UTF-8のデフォルト化", description: "文字列のデフォルトエンコーディングがUTF-8になり、国際化対応が容易になりました。" },
    ],
    position: "YARVの導入は、Rubyのパフォーマンスに対する長年の課題に終止符を打ち、大規模なアプリケーションや高負荷な環境での利用を可能にしました。一部の非互換性があったものの、Rubyの未来を決定づける重要なステップとなりました。",
    performance: "YARVの導入により、Ruby 1.8と比較して2倍から3倍の実行速度向上を達成しました。",
  },
  {
    id: "ruby-2-0",
    version: "2.0",
    title: "より洗練された表現力：Rubyの成熟期への第一歩",
    summary: "「キーワード引数やRefinementsなど、より洗練された表現力を手に入れ、言語としての成熟を深めたバージョン。」",
    features: [
      { icon: "fas fa-key", title: "キーワード引数", description: "メソッドの引数に名前を付けて渡せるようになり、可読性と柔軟性が向上しました。" },
      { icon: "fas fa-link", title: "Module#prepend", description: "メソッドの呼び出し順序を変更できるprependが導入され、より強力なメソッドのオーバーライドが可能になりました。" },
      { icon: "fas fa-hourglass-half", title: "Enumerable#lazy", description: "遅延評価をサポートするlazyメソッドが追加され、大規模なコレクション処理の効率が向上しました。" },
      { icon: "fas fa-palette", title: "Refinements (実験的)", description: "特定のスコープ内でのみクラスを拡張できるRefinementsが実験的に導入され、モンキーパッチの副作用を局所化できるようになりました。" },
    ],
    position: "このバージョンは、言語の根本的な書き換えよりも、既存の機能を洗練させ、開発者の利便性を高めることに重点を置きました。より表現豊かで、安全なコードを書くための機能が追加され、Rubyはさらに成熟した言語へと進化しました。",
    performance: "1.9系からの大きなパフォーマンス向上はありませんでしたが、安定性と信頼性が向上しました。",
  },
  {
    id: "ruby-2-1",
    version: "2.1",
    title: "RGenGC導入でGC性能が大幅向上：より快適な実行環境を提供",
    summary: "「世代別ガベージコレクションRGenGCの導入により、メモリ管理が効率化され、アプリケーションの応答性が向上したバージョン。」",
    features: [
      { icon: "fas fa-recycle", title: "RGenGC (Generational Garbage Collection)", description: "世代別ガベージコレクションが導入され、GCの一時停止時間が大幅に短縮され、特に長期間稼働するアプリケーションのパフォーマンスが向上しました。" },
      { icon: "fas fa-calculator", title: "Rational/Complexリテラル", description: "有理数や複素数を直接記述できるリテラルが追加されました。" },
      { icon: "fas fa-tag", title: "defがメソッド名を返す", description: "defキーワードが定義したメソッド名を返すようになり、メタプログラミングの柔軟性が増しました。" },
    ],
    position: "GCの改善は、Rubyアプリケーションの応答性と安定性を高め、より大規模で要求の厳しいシステムでの利用を後押ししました。パフォーマンス最適化の継続的な取り組みが示されました。",
    performance: "RGenGCの導入により、GCによる一時停止時間が大幅に削減され、全体的なアプリケーションの応答性が向上しました。",
  },
  {
    id: "ruby-2-2",
    version: "2.2",
    title: "GCのさらなる改善：メモリ効率と安定性を追求した堅実なバージョン",
    summary: "「Incremental GCやSymbol GCの導入により、メモリ使用量とGC性能がさらに最適化され、安定性が向上したバージョン。」",
    features: [
      { icon: "fas fa-chart-line", title: "Incremental GC", description: "GCの処理をより細かく分割することで、アプリケーションの一時停止時間をさらに短縮しました。" },
      { icon: "fas fa-font", title: "Symbol GC", description: "シンボルもGCの対象となり、メモリ使用量の削減に貢献しました。" },
      { icon: "fas fa-globe-americas", title: "Unicode正規化", description: "Unicode文字列の正規化機能が追加され、国際化対応が強化されました。" },
    ],
    position: "GCの継続的な改善は、Rubyがエンタープライズレベルのアプリケーションにも適した、より堅牢で信頼性の高い言語であることを示しました。安定性と効率性が重視されました。",
    performance: "GCのさらなる改善により、メモリ使用量が削減され、特にRailsアプリケーションなどで体感できるパフォーマンス向上が見られました。",
  },
  {
    id: "ruby-2-3",
    version: "2.3",
    title: "安全なナビゲーション演算子：より堅牢で読みやすいコードを可能に",
    summary: "「&. (ぼっち演算子) の導入により、nilチェックを簡潔に記述できるようになり、コードの安全性と可読性が向上したバージョン。」",
    features: [
      { icon: "fas fa-question-circle", title: "&. (Safe Navigation Operator / Lonely Operator)", description: "メソッドチェーンの途中でnilが発生してもエラーにならない&.演算子が導入され、煩雑なnilチェックを減らすことができました。" },
      { icon: "fas fa-search", title: "Hash#dig / Array#dig", description: "ネストしたハッシュや配列から安全に値を取り出すdigメソッドが追加されました。" },
      { icon: "fas fa-lightbulb", title: "did_you_mean gemのバンドル", description: "タイポなどによるエラー時に、正しいメソッド名を提案してくれるdid_you_meanが標準でバンドルされ、開発体験が向上しました。" },
      { icon: "fas fa-snowflake", title: "Frozen String Literals pragma (実験的)", description: "文字列リテラルをデフォルトでフリーズ（変更不可）にするオプションが実験的に導入され、メモリ効率とセキュリティの向上が期待されました。" },
    ],
    position: "開発者の生産性とコードの安全性を高めるための「かゆいところに手が届く」機能が多数追加されました。Rubyがより実用的で、エラーに強い言語へと進化していることを示しました。",
    performance: "全体的なパフォーマンスは2.2系とほぼ同等ですが、一部の内部最適化が施されました。",
  },
  {
    id: "ruby-2-4",
    version: "2.4",
    title: "数値の扱いをシンプルに：内部構造の改善と利便性の追求",
    summary: "「FixnumとBignumがIntegerに統合され、数値の扱いがよりシンプルかつ一貫性のあるものになったバージョン。」",
    features: [
      { icon: "fas fa-infinity", title: "FixnumとBignumのIntegerへの統合", description: "整数がその大きさに関わらずIntegerクラスで統一されるようになり、数値の扱いがよりシンプルになりました。" },
      { icon: "fas fa-bug", title: "Binding#irb", description: "デバッグ時に任意のコードの実行コンテキストをirbで開けるようになり、デバッグが容易になりました。" },
      { icon: "fas fa-spell-check", title: "String#casecmp?", description: "大文字小文字を区別しない文字列比較メソッドが追加されました。" },
    ],
    position: "このバージョンは、言語の内部的なクリーンアップと、開発者の利便性を向上させるための小さな改善に焦点を当てました。Rubyが着実に進化し、より使いやすい言語へと洗練されていることを示しました。",
    performance: "ハッシュテーブルの改善など、内部的なパフォーマンス最適化が図られました。",
  },
  {
    id: "ruby-2-5",
    version: "2.5",
    title: "テストカバレッジ機能の強化：より堅牢なソフトウェア開発を支援",
    summary: "「コードカバレッジ計測機能の強化や、より柔軟な制御フローを可能にする機能が追加され、開発プロセスを支援したバージョン。」",
    features: [
      { icon: "fas fa-vial", title: "ブランチカバレッジとメソッドカバレッジ", description: "テストのカバレッジ計測機能が強化され、より詳細なテスト状況を把握できるようになりました。" },
      { icon: "fas fa-arrow-right", title: "yield_self (後のthen)", description: "レシーバ自身をブロックに渡すyield_selfメソッドが導入され、メソッドチェーンをより読みやすく記述できるようになりました。（後にthenに改名）" },
      { icon: "fas fa-shield-alt", title: "トップレベル定数探索の廃止", description: "意図しない定数探索を防ぐため、トップレベルでの定数探索が廃止されました。" },
    ],
    position: "開発者がより高品質なソフトウェアを開発できるよう、テスト支援やコードの記述性を向上させる機能が追加されました。Rubyが単なる言語としてだけでなく、開発エコシステム全体を重視している姿勢が伺えます。",
    performance: "GCの改善やメソッド呼び出しの最適化など、全体的にパフォーマンスが向上しました。",
  },
  {
    id: "ruby-2-6",
    version: "2.6",
    title: "MJIT導入で、さらなる高速化への道を切り開いた挑戦的なバージョン",
    summary: "「実験的なJITコンパイラMJITの導入により、実行速度のさらなる向上が期待され、Rubyのパフォーマンスの未来を切り開いたバージョン。」",
    features: [
      { icon: "fas fa-tachometer-alt", title: "JIT (Just-In-Time) コンパイラ (MJIT) の導入 (実験的)", description: "Rubyのコードをより高速なマシンコードに変換するJITコンパイラが実験的に導入され、大規模なアプリケーションでのパフォーマンス向上が期待されました。" },
      { icon: "fas fa-tree", title: "RubyVM::AbstractSyntaxTree (AST) の提供", description: "Rubyコードの抽象構文木にアクセスできるようになり、静的解析ツールなどの開発が容易になりました。" },
      { icon: "fas fa-filter", title: "Enumerable#filter_map", description: "フィルタリングとマッピングを同時に行う便利なメソッドが追加されました。" },
    ],
    position: "JITの導入は、Rubyがパフォーマンスの限界をさらに押し広げようとする強い意志を示しました。これは、Rubyがより幅広い用途、特に計算負荷の高い処理にも対応できる可能性を秘めていることを意味します。",
    performance: "MJITは特定のワークロードでパフォーマンス向上をもたらしましたが、まだ実験段階であり、今後のバージョンでの本格的な改善が期待されました。",
  },
  {
    id: "ruby-2-7",
    version: "2.7",
    title: "Ruby 3への橋渡し：実験的機能が満載のプレビュー版",
    summary: "「パターンマッチングやnumbered parametersなど、Ruby 3で本格導入される主要な機能を実験的に先行導入し、未来のRubyの姿を示したバージョン。」",
    features: [
      { icon: "fas fa-bullseye", title: "パターンマッチング (実験的)", description: "構造化されたデータを簡潔に分解・処理できるパターンマッチングが実験的に導入されました。" },
      { icon: "fas fa-sort-numeric-up", title: "Numbered parameters (実験的)", description: "ブロック引数を_1, _2のように自動的に参照できる機能が実験的に追加され、短いブロックの記述がより簡潔になりました。" },
      { icon: "fas fa-exchange-alt", title: "キーワード引数と位置引数の分離", description: "曖昧だったキーワード引数と位置引数の挙動が明確に分離され、将来のRuby 3への移行をスムーズにするための変更が行われました。" },
      { icon: "fas fa-minus-circle", title: "Hash#except", description: "特定のキーを除外した新しいハッシュを生成するexceptメソッドが追加されました。" },
    ],
    position: "Ruby 3.0への大きな変更に備えるための「プレビュー」的な役割を担いました。これにより、開発者は新しい機能を早期に試すことができ、コミュニティ全体でフィードバックを共有する機会が生まれました。",
    performance: "MJITの改善が続けられ、全体的なパフォーマンスは2.6系から着実に向上しました。",
  },
  {
    id: "ruby-3-0",
    version: "3.0",
    title: "Ruby 3x3の目標達成：並行処理、型安全性、そして新時代へ突入",
    summary: "「「Ruby 3x3」の目標達成、Ractorによる真の並行処理、型安全性の強化など、Rubyの未来を大きく変える画期的なバージョン。」",
    features: [
      { icon: "fas fa-bolt", title: "Ruby 3x3 Performance Goal達成", description: "Ruby 2.0と比較して3倍のパフォーマンス向上を達成するという目標が達成されました。" },
      { icon: "fas fa-handshake", title: "Ractor (Actor-model concurrency)", description: "真の並行処理を可能にするアクターモデルベースのRactorが導入され、スレッドセーフな並列プログラムを可能にしました。" },
      { icon: "fas fa-clock", title: "Fiber Scheduler", description: "ノンブロッキングI/Oをより効率的に扱うためのFiber Schedulerが導入されました。" },
      { icon: "fas fa-crosshairs", title: "パターンマッチング (安定版)", description: "2.7で実験的だったパターンマッチングが安定機能として導入されました。" },
      { icon: "fas fa-pen-nib", title: "型チェック (RBS, TypeProf)", description: "静的型解析をサポートするRBS言語と、型推論ツールTypeProfが導入され、大規模開発での型安全性が向上しました。" },
    ],
    position: "Ruby 3.0は、パフォーマンス、並行処理、型安全性の3つの柱でRubyを大幅に進化させました。これにより、Rubyはより大規模で複雑なシステム、特に並行処理が求められる分野での利用に適した、現代的な言語としての地位を確立しました。",
    performance: "Ruby 2.0と比較して3倍のパフォーマンス向上を達成しました。これは主にMJITの改善と、言語内部の最適化によるものです。",
  },
  {
    id: "ruby-3-1",
    version: "3.1",
    title: "YJIT導入でさらなる高速化：開発体験を向上",
    summary: "「新しいJITコンパイラYJITの導入により、Rubyの実行速度がさらに向上し、開発者のデバッグ体験も改善されたバージョン。」",
    features: [
      { icon: "fas fa-rocket", title: "YJIT (Yet Another JIT) の導入", description: "MJITとは異なるアプローチの新しいJITコンパイラYJITが導入され、特にRailsのような大規模アプリケーションでの起動時間と実行速度が向上しました。" },
      { icon: "fas fa-bug", title: "Debuggerのバンドル", description: "新しいデバッガが標準でバンドルされ、より快適なデバッグ体験を提供します。" },
      { icon: "fas fa-minus", title: "Hash#except with block", description: "Hash#exceptがブロックを受け取るようになり、より柔軟なキーの除外が可能になりました。" },
    ],
    position: "Ruby 3.0で達成したパフォーマンス目標をさらに押し進め、JIT技術の進化に力を入れていることを示しました。また、開発者の日々の作業を支援するツール（デバッガ）の強化も行われました。",
    performance: "YJITの導入により、特にRailsアプリケーションの起動時間やリクエスト処理速度において、MJITよりも優れたパフォーマンスを発揮するようになりました。",
  },
  {
    id: "ruby-3-2",
    version: "3.2",
    title: "WebAssembly対応で新たな可能性を広げ、開発支援機能も充実",
    summary: "「WebAssembly System Interface (WASI) のサポートにより、RubyがWebAssembly環境で動作する新たな可能性を広げたバージョン。」",
    features: [
      { icon: "fas fa-globe-africa", title: "WASI (WebAssembly System Interface) サポート", description: "RubyがWebAssembly環境で動作するためのサポートが追加され、ブラウザやWebAssemblyランタイム上でのRubyの利用が視野に入りました。" },
      { icon: "fas fa-pencil-alt", title: "SyntaxSuggestのバンドル", description: "シンタックスエラーの修正を提案するSyntaxSuggestが標準でバンドルされ、エラー解決が容易になりました。" },
      { icon: "fas fa-underline", title: "匿名_をrest引数に", description: "メソッド定義で匿名_をrest引数として使用できるようになり、不要な引数を無視する際に便利になりました。" },
      { icon: "fas fa-database", title: "Dataクラス", description: "シンプルな値オブジェクトを定義するためのDataクラスが追加されました。" },
    ],
    position: "WebAssemblyへの対応は、Rubyの適用範囲をWebフロントエンドやサーバーレス環境など、新たな領域へと拡大する可能性を示しました。同時に、開発者の生産性を高めるための細やかな改善も継続されました。",
    performance: "YJITのさらなる改善や、その他の内部的な最適化により、着実なパフォーマンス向上が見られました。",
  },
  {
    id: "ruby-3-3",
    version: "3.3",
    title: "新しいパーサーPrismの導入：未来のRubyを支える基盤を強化",
    summary: "「新しいパーサーPrismの導入により、Rubyの内部構造が刷新され、将来の言語進化とツール開発の基盤を強化したバージョン。」",
    features: [
      { icon: "fas fa-cogs", title: "Prismパーサーの導入", description: "従来のRipperパーサーに代わる新しいCベースのパーサーPrismがデフォルトで導入されました。これにより、Rubyの解析がより高速かつ堅牢になり、今後の言語機能追加やツール開発が容易になります。" },
      { icon: "fas fa-tools", title: "Lramaパーサージェネレータ", description: "Yacc互換の新しいパーサージェネレータLramaが導入され、Rubyの構文解析のメンテナンス性が向上しました。" },
      { icon: "fas fa-rocket", title: "YJITのさらなる改善", description: "YJITがさらに高速化され、メモリ使用量も削減されました。特にRailsのような大規模なアプリケーションで顕著なパフォーマンス向上が見られました。" },
      { icon: "fas fa-magic", title: "IRBの改善", description: "対話型RubyシェルIRBが大幅に改善され、より使いやすくなりました。" },
    ],
    position: "このバージョンは、目に見える新機能よりも、Rubyの内部的な基盤を強化することに重点を当てました。新しいパーサーの導入は、Rubyの長期的な安定性、進化の速度、そしてエコシステム全体の健全性を保証するための重要な投資です。",
    performance: "YJITの継続的な改善により、Ruby 3.2と比較してさらなるパフォーマンス向上を達成しました。特にRailsアプリケーションで約15%の高速化が報告されています。",
  },
];

export default rubyVersions; 